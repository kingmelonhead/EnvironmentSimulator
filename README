Name: John Hackstadt

README for assignment 1

calling 'git log' will allow you to see progression of project

for specific changes, the commits can be viewed from the git hub page

url: https://github.com/kingmelonhead/hackstad.1/blob/main/source.c

---------------Basic operations of functions-----------------------

print_vars() : 
	-iterates through the environment to get number of environment variables
	-for loop using that # of variables goes through and copies each environment variable to a temp string
	-cuts off everthing after the =, including the =. This extracts the name of the var only
	-calls getenv with the name from the previous step and prints to std out
	-this all repeats for each element of the environ array

run_utility() :
	- Attemts to run passed arg as a system call
	- Displays appropriate message if it is determined not a valid command

update_env() :
	- this function takes in arguments to either append to the environment list, or update, depending on
		whether or not the variable already exists in the environment
	- This will be done by making an new pointer and redirecting the environment to the new one 
		since we cant resize the default environment
	- A user can enter an argument other than a name=value pair and it will be ran as a command in the shell

replace_env() :
	- This function takes in arguments to add to a new environment
	- The existing environment pointer gets redirected to the new one made here to overwrite it
	- If the user passes command to the function redirects to run_utility()

display_help() :
	-This function just outputs help information to the screen

check_inenv() :
	- Determines if a var already exists in the environment

check_var() :
	- Determines if passed argument can be an environment variable
	- Does this by seeing if it is in the form [something]=[something]

get_loc() :
	-Gets the location of an already existing var from the environment and returns it

main() :
	- This function is used to put all the other functions to use
	- Utilizes getopt() in order to determine if the user wants simply the help menu printed (-h option)
		as well as gives them the option to overwrite the environment with their arguments (-i option)
	- not using the -i or -h options will result in the current environment being updated as oppsed to 
		being overwritten like it is with the -i option
	- prints final state of the environment

---------------- Options ------------------------------------------------------------

[-i] - Overwrite the environment with name=value pairs given in arguments
	

[-h] - Display help menu and end program


[utility] - pass as an argument with arguments after it. Any argument after it will be ran using
		system() under the updated environment

[no options] - run ./doenv with nothing else and it will print the current environment


------------- Usage examples  -------------------------------------------------------------------

./doenv -h

./doenv 

./doenv name=value ...

./doenv -i name=value ... name=value

./doenv name=value .... name=value [utility] ... (examples of utility include: pwd, 'echo hello' )

------------ issues -----------------------------------------------------------------------

When working on this project, the only issue that I can't resolve is if the user tries to replace the environment
but they dont re set the variable 'TERM' and it results in an issue if the user attempts to recursively call ./doenv

I will put a note to the user that if their intent is to pass ./doenv as a utility argument when replacing the whole environment
they must manually set the TERM variable first
